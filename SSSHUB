local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/Karaca00/Atom-HUb/refs/heads/main/Fluent%20UI%20Library.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Karaca00/Atom-HUb/refs/heads/main/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
	Title = "Atom-Hub",
	SubTitle = "Blox Fruits",
	TabWidth = 160,
	Size = UDim2.fromOffset(550, 320),
	Acrylic = false, 
	Theme = "Darker",
	MinimizeKey = Enum.KeyCode.LeftControl
})

do 
	Config = {

	}
	_G.Config = Config
	Players = game.Players
	LocalPlayer = game.Players.LocalPlayer
	Client = game.Players.LocalPlayer

	RunService = game:GetService("RunService")
	VirtualInputManager = game:GetService('VirtualInputManager')
	CoreGui = game:GetService("CoreGui")
	TeleportService = game:GetService("TeleportService")
	VirtualUser = game:GetService("VirtualUser")
	VirtualInputManager = game:GetService("VirtualInputManager")
	UserInputService = game:GetService("UserInputService")
    TweenService = game:GetService("TweenService")
	
	PlayerGui = LocalPlayer.PlayerGui
	Backpack = LocalPlayer.Backpack

	Char = Client.Character
	Character = Client.Character

	repeat 
		LocalPlayer = Players.LocalPlayer
		wait()
	until LocalPlayer
end

function Notify(Des, Time, title)
	Fluent:Notify({
		Title= title or "Atom Hub",
		Content = Des,
		Duration = Time or 3
	})
end

_G['Atom Hub Table'] = {
	isWindows = UserInputService:GetPlatform() == Enum.Platform.Windows,
	TypeOs = (table.find({Enum.Platform.Windows}, game:GetService('UserInputService'):GetPlatform()) ~= nil and 'Pc') or 'Mb',
	SizeUi = (not isWindows and UDim2.fromOffset(600,300)) or UDim2.fromOffset(560,600),
	AutoSize = true,
	TweenUiSize = true,
	SpeedTweenUi = 0.25,
	StyleTweenUi = Enum.EasingStyle.Quad,
	Mutiply = 1.80,
	SizeX = 550,
	SafePercent = 20,

	AnimationUiToggle = true,
}

_G['Atom Hub Table'].SizeUi = (not _G['Atom Hub Table'].isWindows and UDim2.fromOffset(600,300)) or UDim2.fromOffset(560,600)
if not _G['Atom Hub Table'].isWindows then
	if game.CoreGui:FindFirstChild('UIBUTTON') then
		game.CoreGui:FindFirstChild('UIBUTTON'):Destroy()
	end

	local UserInputService = game:GetService("UserInputService")
	local UIBUTTON = Instance.new("ScreenGui")
	local Frame = Instance.new("Frame")
	local ImageButton = Instance.new("ImageButton")
	local UICorner = Instance.new("UICorner")
	local UICorner_2 = Instance.new("UICorner")

	UIBUTTON.Name = "UIBUTTON"
	UIBUTTON.Parent = game.CoreGui
	UIBUTTON.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	Frame.Parent = UIBUTTON
	Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
	Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame.BorderSizePixel = 0
	Frame.Transparency = 1
	Frame.Position = UDim2.new(0.157012194, 0, 0.164366379, 0)
	Frame.Size = UDim2.new(0, 115, 0, 49)

ImageButton.Parent = Frame
ImageButton.BorderSizePixel = 0
ImageButton.Active = true
ImageButton.Draggable = true
ImageButton.Position = UDim2.new(0.218742043, 0, -0.155235752, 0)
ImageButton.Size = UDim2.new(0, 40, 0, 40)

ImageButton.Image = "rbxassetid://100359220012650"

ImageButton.MouseButton1Click:Connect(function()
    local VirtualInputManager = game:GetService("VirtualInputManager")
    VirtualInputManager:SendKeyEvent(true,"RightControl",false,game)
    VirtualInputManager:SendKeyEvent(false,"RightControl",false,game)
    VirtualInputManager:SendKeyEvent(true,"LeftControl",false,game)
    VirtualInputManager:SendKeyEvent(false,"LeftControl",false,game)
end)

UICorner.CornerRadius = UDim.new(0, 100)
UICorner.Parent = ImageButton

	UICorner_2.CornerRadius = UDim.new(0, 10)
	UICorner_2.Parent = Frame

	local UIS = game:GetService('UserInputService')
	local frame = Frame
	local dragToggle = nil
	local dragSpeed = 0.25
	local dragStart = nil
	local startPos = nil
	frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
			dragToggle = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)

	UIS.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if dragToggle then
				Frame.Transparency = 1
				updateInput(input)
			else
				Frame.Transparency = 1
			end
		end
	end)
end

-------------------------------------------------------------------------------------------------------------------------------------------------

local Tap = {
	Main = Window:AddTab({Title = "Main", Icon = "box"}),
	Status = Window:AddTab({ Title = "Status", Icon = "user"}),
	Shop = Window:AddTab({ Title = "Shop", Icon = "shopping-bag"}),
	Teleport = Window:AddTab({Title = "Teleport", Icon = "map"}),
	Settings = Window:AddTab({Title = "Settings", Icon = "settings"})
}



--Main
local farm = Tap.Main:AddSection("Auto Farm")
_G.Toggle_Bring = nil
_G.Toggle_Buso = nil
_G.Toggle_Anchored = nil

local autobring = farm:AddToggle("Bring",{
    Title = "Auto Bring",
    Default = false
})

autobring:OnChanged(function(Toggle)
    _G.Toggle_Bring = Toggle
end)

RunService.RenderStepped:Connect(function()
    if _G.Toggle_Bring == true then
        for i,v in pairs(game.workspace.Enemies:GetChildren()) do
            if (v.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 337.5 then
                v.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.CFrame.X - 10,LocalPlayer.Character.HumanoidRootPart.CFrame.Y,LocalPlayer.Character.HumanoidRootPart.CFrame.Z)
                v.Humanoid.WalkSpeed = 0
                sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
            end
        end
    end
end)

local Anchored_Character = farm:AddToggle("Anchored",{
    Title = "Anchored Character",
    Default = false
})

Anchored_Character:OnChanged(function(Toggle)
    Toggle_Anchored = Toggle
end)

RunService.RenderStepped:Connect(function()
    if Toggle_Anchored == true then
        LocalPlayer.Character.HumanoidRootPart.Anchored = true
    else
        LocalPlayer.Character.HumanoidRootPart.Anchored = false
    end
end)

local autobuso = farm:AddToggle("Buso", {
    Title = "Auto Turn Haki",
    Default = true
})

autobuso:OnChanged(function(Toggle)
    _G.Toggle_Buso = Toggle
end)

RunService.RenderStepped:Connect(function()
    if _G.Toggle_Buso == true then
        if not game:GetService("Players").LocalPlayer.Character:FindFirstChild("HasBuso") then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Buso")
        end
    end
end)



local auto_stats = Tap.Main:AddSection("Auto Status")
_G.Melee_Status = nil
_G.Defense_Status = nil
_G.Sword_Status = nil
_G.Gun_Status = nil
_G.Fruit_Status = nil
_G.Point_Status = 1

local btml = auto_stats:AddToggle("Melee",{
    Title = "Melee",
    Default = true
})
local btde = auto_stats:AddToggle("Defense",{
    Title = "Defense",
    Default = true
})
local btsw = auto_stats:AddToggle("Sword",{
    Title = "Sword",
    Default = false
})
local btgn = auto_stats:AddToggle("Gun",{
    Title = "Gun",
    Default = false
})
local btdf = auto_stats:AddToggle("Demon Fruit",{
    Title = "Demon Fruit",
    Default = true
})

btml:OnChanged(function(Toggle)
    _G.Melee_Status = Toggle
end)
btde:OnChanged(function(Toggle)
    _G.Defense_Status = Toggle
end)
btsw:OnChanged(function(Toggle)
    _G.Sword_Status = Toggle
end)
btgn:OnChanged(function(Toggle)
    _G.Gun_Status = Toggle
end)
btdf:OnChanged(function(Toggle)
    _G.Fruit_Status = Toggle
end)

local Input_Point = auto_stats:AddInput("Point", {
    Title = "Status Point",
    Default = 1,
    Placeholder = "Status Point",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
         _G.Point_Status = Value
    end
})

RunService.RenderStepped:Connect(function()
    wait(0.2)
    if _G.Point_Status >= 1 then
        if _G.Melee_Status == true and Client.Data.Stats.Melee.Level.Value <= Client.Data.Level.Value then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AddPoint","Melee",_G.Point_Status)
        end
        if _G.Defense_Status == true and Client.Data.Stats.Defense.Level.Value <= Client.Data.Level.Value then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AddPoint","Defense",_G.Point_Status)
        end
        if _G.Sword_Status == true and Client.Data.Stats.Sword.Level.Value <= Client.Data.Level.Value then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AddPoint","Sword",_G.Point_Status)
        end
        if _G.Gun_Status == true and Client.Data.Stats.Gun.Level.Value <= Client.Data.Level.Value then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AddPoint","Gun",_G.Point_Status)
        end
        if _G.Fruit_Status == true and Client.Data.Stats["Demon Fruit"].Level.Value <= Client.Data.Level.Value then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AddPoint","Demon Fruit",_G.Point_Status)
        end
    end
end)



local Chest = Tap.Main:AddSection("Auto Chest")
_G.Toggle_Chest = nil
_G.oldpos = nil
_G.Toggle_Backpos = nil

local autochest = Chest:AddToggle("Chest",{
    Title = "Auto Chest",
    Default = false
})

autochest:OnChanged(function(Toggle)
    _G.Toggle_Chest = Toggle
    if _G.Toggle_Chest == true and _G.oldpos == nil then
        _G.oldpos = LocalPlayer.Character.HumanoidRootPart.Position
    end
    if _G.Toggle_Chest == false and _G.oldpos ~= nil then
        wait(0.5)
        _G.oldpos = nil
    end
end)

local autobackpos = Chest:AddToggle("BackPos",{
    Title = "Auto Back",
    Default = true
})

autobackpos:OnChanged(function(Toggle)
    _G.Toggle_Backpos = Toggle
end)

RunService.RenderStepped:Connect(function()
    if _G.Toggle_Chest == true then
        for i,v in pairs(game.workspace.ChestModels:GetChildren()) do
            if i ~= nil then
                LocalPlayer.Character.HumanoidRootPart.CFrame = v.RootPart.CFrame
                wait(0.25)
                v:Destroy()
            end
        end
    else
        if _G.oldpos ~= nil then
            if _G.Toggle_Backpos == true then
                local distance = (LocalPlayer.Character.HumanoidRootPart.Position - _G.oldpos).Magnitude / 190
                local tweenold = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(_G.oldpos)})
                tweenold:Play()
            end
        end
    end
end)




local bone = Tap.Main:AddSection("Farm Bone")
_G.Toggle_Bone = nil

local status_bone = bone:AddParagraph({
    Title = ""
})

local Take_bone = bone:AddToggle("Take", {
    Title = "Random Bone",
    Default = false
})

Take_bone:OnChanged(function(Toggle)
    _G.Toggle_Bone = Toggle
end)

RunService.RenderStepped:Connect(function()
    status_bone:SetTitle("Bone  :  " .. game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Bones","Check"))
    if _G.Toggle_Bone == true then
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Bones","Buy",1,1)
    end
end)

--Status
local Statustap = Tap.Status:AddSection("Status Player")

local stlv = Statustap:AddParagraph({
    Title = ""
})

local stxp = Statustap:AddParagraph({
    Title = ""
})

local stbl = Statustap:AddParagraph({
    Title = ""
})

local stfm = Statustap:AddParagraph({
    Title = ""
})

local strc = Statustap:AddParagraph({
    Title = ""
})

local stsp = Statustap:AddParagraph({
    Title = ""
})

RunService.RenderStepped:Connect(function()
    stlv:SetTitle("Level  :  " .. Client.Data.Level.Value)
    stxp:SetTitle("Exp  :  " .. Client.Data.Exp.Value)
    stbl:SetTitle("Beli  :  " .. Client.Data.Beli.Value)
    stfm:SetTitle("Fragments  :  " .. Client.Data.Fragments.Value)
    strc:SetTitle("Race  :  " .. Client.Data.Race.Value)
    stsp:SetTitle("Spawn Point  :  " .. Client.Data.SpawnPoint.Value)
end)



--Teleport
local teleport_tap = Tap.Teleport:AddSection("Teleport To Island")
local Island = nil

local slil = teleport_tap:AddDropdown("teleport", {
    Title = "Select Island",
    Values = {"Port Town","Hydra Island","Great Tree","Castle Of The Sea","Mansion","Tiki Outpost","Haunted Castle","IceCream Island","Peanut Island","Loaf Island","Chocolate Island","Candy Island"},
    Multi = false,
    Default = 1
})

slil:OnChanged(function(Value)
    Island = Value
end)

teleport_tap:AddButton({
    Title = "Teleport",
    Description = "Click To Teleport",
    Callback = function()
        if Island == "Port Town" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.Default.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweenpt = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweenpt:Play()
        end
        if Island == "Hydra Island" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.Hydra3.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweenhl = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweenhl:Play()
        end
        if Island == "Great Tree" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.GreatTree.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweengt = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweengt:Play()
        end
        if Island == "Castle Of The Sea" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.SeaCastle.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweencfts = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweencfts:Play()
        end
        if Island == "Mansion" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.BigMansion.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweenm = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweenm:Play()
        end
        if Island == "Tiki Outpost" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.Tiki.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweento = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweento:Play()
        end
        if Island == "Haunted Castle" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.HauntedCastle.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweenhc = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweenhc:Play()
        end
        if Island == "IceCream Island" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.IceCream.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweenii = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweenii:Play()
        end
        if Island == "Peanut Island" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.Peanut.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweenpi = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweenpi:Play()
        end
        if Island == "Loaf Island" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.Loaf.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweenli = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweenli:Play()
        end
        if Island == "Chocolate Island" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.Chocolate.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweenci = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweenci:Play()
        end
        if Island == "Candy Island" then
            local part = workspace._WorldOrigin.PlayerSpawns.Pirates.CandyCane.Part
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude / 190
            tweenai = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(distance, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0), {CFrame = CFrame.new(part.Position)})
            tweenai:Play()
        end
    end
})

teleport_tap:AddButton({
    Title = "Pause Tween",
    Callback = function()
        if tweenpt then
            tweenpt:Pause()
        end
        if tweenhl then
            tweenhl:Pause()     
        end
        if tweengt then
            tweengt:Pause()
        end
        if tweencfts then
            tweencfts:Pause()
        end
        if tweenm then
            tweenm:Pause()
        end
        if tweento then
            tweento:Pause()
        end
        if tweenhc then
            tweenhc:Pause()
        end
        if tweenii then
            tweenii:Pause()
        end
        if tweenpi then
            tweenpi:Pause()
        end
        if tweenli then
            tweenli:Pause()
        end
        if tweenci then
            tweenci:Pause()
        end
        if tweenai then
            tweenai:Pause()
        end
    end
})




--Setting
local setting_server = Tap.Settings:AddSection("Server")
_G.auto_rejoin = nil

setting_server:AddButton({
	Title = "First Sea 1",
	Description = "",
	Callback = function()
		game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelMain")
	end
})

setting_server:AddButton({
	Title = "Second Sea 2",
	Description = "",
	Callback = function()
		game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelDressrosa")
	end
})

setting_server:AddButton({
	Title = "Third Sea 3",
	Description = "",
	Callback = function()
		game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelZou")
	end
})

local autorejoin = setting_server:AddToggle("auto rejoin",{
    Title = "Auto Rejoin",
    Default = true
})

autorejoin:OnChanged(function(Toggle)
    _G.auto_rejoin = Toggle
end)

RunService.RenderStepped:Connect(function()
    getgenv().rejoin = game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
		if child.Name == 'ErrorPrompt' and child:FindFirstChild('MessageArea') and child.MessageArea:FindFirstChild("ErrorFrame") and _G.auto_rejoin == true then
			TeleportService:TeleportToPlaceInstance(game.placeId, game.jobId, game.Players.LocalPlayer);
		end
	end)
end)

setting_server:AddButton({
	Title = "Rejoin Server",
	Description = "",
	Callback = function()
		TeleportService:TeleportToPlaceInstance(game.placeId, game.jobId, game.Players.LocalPlayer);
	end
})
-------------------------------------------------------------------------------------------------------------------------------------------------

local Old = os.time()
	task.spawn(function(InitializeService)
		pcall(function()
			for i,v in pairs(getconnections(Client.Idled)) do
				v:Disable() 
			end
			Client.Idled:connect(function()
				game:GetService("VirtualUser"):Button2Down(Vector2.new(1,1),workspace.CurrentCamera.CFrame)
				wait(0.5)
				game:GetService("VirtualUser"):Button2Up(Vector2.new(1,1),workspace.CurrentCamera.CFrame)
			end)
			while wait(300) do
				game:GetService("VirtualUser"):Button2Down(Vector2.new(1,1),workspace.CurrentCamera.CFrame)
				wait(0.5)
				game:GetService("VirtualUser"):Button2Up(Vector2.new(1,1),workspace.CurrentCamera.CFrame)
			end
		end)
	end)
do
	Settings_M = Tap.Settings:AddSection("Join Time") do
		Timeing = Settings_M:AddParagraph({        
			Title = ""
		})
	end

	RunService.RenderStepped:Connect(function() -- All RunService
		local TimeSinceLastPlay = os.time() - Old
		local hours = tostring(math.floor(TimeSinceLastPlay / 3600))
		local minutes = tostring(math.floor((TimeSinceLastPlay % 3600) / 60))
		local seconds = tostring(TimeSinceLastPlay % 60)
		Timeing:SetTitle("Joined Server "..hours.." H "..minutes.." M "..seconds.." S ")
	end)


	InterfaceManager:SetLibrary(Fluent)
	InterfaceManager:BuildInterfaceSection(Tap.Settings)
	Window:SelectTab(1)
	Fluent:SetTheme("Darker")

	setfpscap(60)
	while true do
    	if (game:GetService("Workspace").DistributedGameTime % 1 * 60) > 30 then
        	setfpscap(60)
    	end
    	wait(0)
	end
end
